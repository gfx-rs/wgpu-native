# This is the main CI workflow to test that the package can be build on various platforms

name: CI

on:
  push:
    branches: [ master, staging ]
  pull_request:
    branches-ignore: [ staging.tmp ]

jobs:

  # A build that does some "meta" checks on the code integrity where the Rust compiler can't.
  integrity-build:
    name: Code integrity checks
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - run: python checks.py

  # A matrix with common builds

  test-build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-10.15
            name: MacOS Stable
            channel: stable
            build_command: cargo clippy
            make_command: make lib-native
          - os: macos-10.15
            name: MacOS Nightly
            channel: nightly
            build_command: cargo check
            install_deps_command: brew install cmake glfw3
            make_command: make VERBOSE=1
          - os: ubuntu-18.04
            name: Ubuntu Stable
            channel: stable
            build_command: cargo clippy
            install_deps_command: |
                    sudo apt-get update
                    sudo apt-get install -f -y libegl1-mesa-dev
                    sudo apt-get install -f -y mesa-vulkan-drivers
            make_command: make lib-native
          - os: ubuntu-18.04
            name: Ubuntu Nightly
            channel: nightly
            build_command: cargo check
            install_deps_command: |
                                sudo apt-get update
                                sudo apt install -f -y cmake
                                sudo apt-get install -f -y libegl1-mesa-dev
                                sudo apt-get install -f -y mesa-vulkan-drivers
                                GLFW_DIR="$GITHUB_WORKSPACE/libglfw3"
                                mkdir $GLFW_DIR
                                curl -o $GLFW_DIR/libglfw3-dev_3.3.2-1_amd64.deb http://security.ubuntu.com/ubuntu/pool/universe/g/glfw3/libglfw3-dev_3.3.2-1_amd64.deb
                                curl -o $GLFW_DIR/libglfw3_3.3.2-1_amd64.deb http://security.ubuntu.com/ubuntu/pool/universe/g/glfw3/libglfw3_3.3.2-1_amd64.deb
                                sudo apt install -f -y $GLFW_DIR/libglfw3_3.3.2-1_amd64.deb
                                sudo apt install -f -y $GLFW_DIR/libglfw3-dev_3.3.2-1_amd64.deb
                                rm -rf $GLFW_DIR
            make_command: make VERBOSE=1
          - os: windows-2019
            name: Windows Stable
            channel: stable
            build_command: rustup default stable-msvc; cargo clippy
            make_command: make lib-native
            install_deps_command: |
                                # choco exit with code 1 after successful install
                                choco install -y --force llvm | exit 0
                                echo "LIBCLANG_PATH=C:\Program Files\LLVM\lib" >> $GITHUB_ENV
          - os: windows-2019
            name: Windows Nightly
            channel: nightly
            build_command: rustup default nightly-msvc; cargo check
            install_deps_command: |
                                # choco exit with code 1 after successful install ¯\_(ツ)_/¯
                                choco install -y --force cmake make llvm | exit 0
                                echo "LIBCLANG_PATH=C:\Program Files\LLVM\lib" >> $GITHUB_ENV
                                curl -sL -o glfw.zip https://github.com/glfw/glfw/archive/3.3.zip
                                unzip -qq glfw.zip -d $GITHUB_WORKSPACE
                                cd $GITHUB_WORKSPACE/glfw-3.3/
                                export GLFW3_INCLUDE_DIR=`pwd`/include
                                export GLFW3_INSTALL_DIR=`pwd`/install
                                cmake . -DCMAKE_INSTALL_PREFIX=$GLFW3_INSTALL_DIR -DCMAKE_GENERATOR_PLATFORM=x64
                                cmake --build . --target install
            make_command: CMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/glfw-3.3/install make VERBOSE=1
            make_shell: cmd
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Install latest nightly
        if: matrix.channel == 'nightly'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Install clippy
        if: contains(matrix.build_command, 'clippy')
        run: rustup component add clippy
      - name: Install dependencies
        run: ${{ matrix.install_deps_command }}
        shell: bash
      - name: Run tests
        run: cargo test
      - name: Build
        run: ${{ matrix.build_command }}
      - name: Make
        run: ${{ matrix.make_command }}
        shell: bash
      - name: Run examples
        if: contains(matrix.os, 'windows') && matrix.channel == 'nightly'
        run: |
          make run-example-compute;
          make run-example-capture;
        # Don't run example-triangle, because it will get stuck in its main-loop.

  # Some smaller test builds

  ios-build:
    name: iOS Stable
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - run: rustup component add clippy
      - run: rustup target add aarch64-apple-ios
      - run: cargo clippy --target aarch64-apple-ios

  android-build:
    name: Android Stable
    runs-on: ubuntu-18.04
    env:
      PKG_CONFIG_ALLOW_CROSS: 1
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - run: rustup component add clippy
      - name: Install dependencies
        run: |
          sudo apt-get update -y -qq
          sudo apt-get install -y -qq libegl1-mesa-dev libc6-dev-i386
          echo "$ANDROID_HOME/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
      - run: rustup target add aarch64-linux-android
      - run: cargo clippy --target aarch64-linux-android

  macos-vulkan-portability:
    name: MacOS Stable (Vulkan)
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - run: rustup component add clippy
      - run: cargo clippy
