name: CI

on:
  push:
    tags:
      - 'v*'
    branches-ignore: [ staging.tmp ]
  pull_request:
    branches-ignore: [ staging.tmp ]

jobs:

  # Builds to test that the package can be build on various platforms
  test-build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-10.15
            name: MacOS Stable
            channel: stable
            build_command: cargo clippy
            make_command: make package
          - os: macos-10.15
            name: MacOS Nightly
            channel: nightly
            build_command: cargo check
            install_deps_command: brew install cmake glfw3
            make_command: make VERBOSE=1
          - os: ubuntu-18.04
            name: Ubuntu Stable
            channel: stable
            build_command: cargo clippy
            make_command: make package
          - os: ubuntu-18.04
            name: Ubuntu Nightly
            channel: nightly
            build_command: cargo check
            install_deps_command: |
                                sudo apt install -f -y cmake
                                GLFW_DIR="$GITHUB_WORKSPACE/libglfw3"
                                mkdir $GLFW_DIR
                                curl -o $GLFW_DIR/libglfw3-dev_3.3.2-1_amd64.deb http://security.ubuntu.com/ubuntu/pool/universe/g/glfw3/libglfw3-dev_3.3.2-1_amd64.deb
                                curl -o $GLFW_DIR/libglfw3_3.3.2-1_amd64.deb http://security.ubuntu.com/ubuntu/pool/universe/g/glfw3/libglfw3_3.3.2-1_amd64.deb
                                sudo apt install -f -y $GLFW_DIR/libglfw3_3.3.2-1_amd64.deb
                                sudo apt install -f -y $GLFW_DIR/libglfw3-dev_3.3.2-1_amd64.deb
                                rm -rf $GLFW_DIR
            make_command: make VERBOSE=1
          - os: windows-2019
            name: Windows Stable
            channel: stable
            build_command: rustup default stable-msvc; cargo clippy
            make_command: make package
          - os: windows-2019
            name: Windows Nightly
            channel: nightly
            build_command: rustup default nightly-msvc; cargo check
            install_deps_command: |
                                # choco exit with code 1 after successful install ¯\_(ツ)_/¯
                                choco install -y --force cmake make | exit 0
                                curl -sL -o glfw.zip https://github.com/glfw/glfw/archive/3.3.zip
                                unzip -qq glfw.zip -d $GITHUB_WORKSPACE
                                cd $GITHUB_WORKSPACE/glfw-3.3/
                                export GLFW3_INCLUDE_DIR=`pwd`/include
                                export GLFW3_INSTALL_DIR=`pwd`/install
                                cmake . -DCMAKE_INSTALL_PREFIX=$GLFW3_INSTALL_DIR -DCMAKE_GENERATOR_PLATFORM=x64
                                cmake --build . --target install
            make_command: CMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/glfw-3.3/install make VERBOSE=1
    steps:
      - uses: actions/checkout@v2
      - if: matrix.channel == 'nightly'
        name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - if: contains(matrix.build_command, 'clippy')
        run: rustup component add clippy
      - name: Install dependencies
        run: ${{ matrix.install_deps_command }}
        shell: bash
      - name: cargo test
        run: cargo test
      - if: contains(matrix.build_command, 'clippy')
        name: cargo clippy
        run: ${{ matrix.build_command }}
      - if: matrix.channel == 'nightly'
        run: cargo +nightly install cbindgen
      - run: ${{ matrix.make_command }}
        shell: bash

  # Builds for binary releases.
  # Also build on non-tag commits; it also functions as a test.
  # The Linux builds are performed on a "manylinux2010" container. This container
  # is designed such that that the resulting binary has minimal dependencies on system
  # libraries, and thus works on as many linuxes as possible. It's a thing from the
  # Python world, but generally useful.
  release-build:
    name: release-build - ${{ matrix.name }}
    if: contains(github.ref, 'tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: Linux-64
            os: ubuntu-18.04
            RUST_TOOLCHAIN: stable
            ARCH: 64
            OS_NAME: linux
            IMAGE: manylinux2010_x86_64
          - name: Linux-32
            os: ubuntu-18.04
            RUST_TOOLCHAIN: stable-i686-unknown-linux-gnu
            ARCH: 32
            OS_NAME: linux
            IMAGE: manylinux2010_i686
          - name: MacOS-64
            os: macOS-10.15
            RUST_TOOLCHAIN: stable
            ARCH: 64
            OS_NAME: macos
            MACOSX_DEPLOYMENT_TARGET: '10.13'
          - name: Windows-64
            os: vs2017-win2016
            RUST_TOOLCHAIN: stable-msvc
            ARCH: 64
            OS_NAME: windows
          - name: Windows-32
            os: vs2017-win2016
            RUST_TOOLCHAIN: stable-i686-pc-windows-msvc
            ARCH: 32
            OS_NAME: windows
    steps:
    - uses: actions/checkout@v2
    - name: Docker build
      if: success() && matrix.OS_NAME == 'Linux'
      env:
        IMAGE: ${{ matrix.IMAGE }}
        RUST_TOOLCHAIN: ${{ matrix.RUST_TOOLCHAIN }}
      run: |
          CID=$(docker create -t -w /tmp/wgpu-native -v $PWD:/tmp/src:ro quay.io/pypa/$IMAGE bash -c "\
            cp -r /tmp/src/. . && \
            rm -rf ./dist && \
            export PATH=/root/.cargo/bin:\$PATH && \
            export USER=root && \
            curl --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain none && \
            rustup toolchain install --no-self-update $RUST_TOOLCHAIN && \
            rustup default $RUST_TOOLCHAIN && \
            yum install zip -y && \
            make package")
          docker start -ai $CID
          mkdir -p dist
          docker cp $CID:/tmp/wgpu-native/dist/. dist/.
          docker rm $CID
    - name: Host build
      if: success() && matrix.OS_NAME != 'Linux'
      env:
        RUST_TOOLCHAIN: ${{ matrix.RUST_TOOLCHAIN }}
        MACOSX_DEPLOYMENT_TARGET: ${{ matrix.MACOSX_DEPLOYMENT_TARGET }}
      run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path --default-toolchain none
          export PATH=$HOME/.cargo/bin:$PATH
          rustup toolchain install --no-self-update $RUST_TOOLCHAIN
          rustup default $RUST_TOOLCHAIN
          make package
      shell: bash
    - name: Pre-publish
      env:
        OS_NAME: ${{ matrix.OS_NAME }}
        ARCH: ${{ matrix.ARCH }}
      run: |
          mkdir -p ./dist
          mv dist/*debug*.zip ./dist/wgpu-$OS_NAME-$ARCH-debug.zip
          mv dist/*release*.zip ./dist/wgpu-$OS_NAME-$ARCH-release.zip
      shell: bash
    - name: Publish
      uses: actions/upload-artifact@v2
      with:
        path: dist
        name: dist

  # Some smaller test builds

  ios-build:
    name: iOS Stable
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
      - run: rustup component add clippy
      - run: rustup target add aarch64-apple-ios
      - run: cargo clippy --target aarch64-apple-ios

  android-build:
    name: Android Stable
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - run: rustup component add clippy
      - name: Install dependencies
        run: |
          curl -LO https://dl.google.com/android/repository/android-ndk-r21b-linux-x86_64.zip
          unzip -qq android-ndk-r21b-linux-x86_64.zip -d $GITHUB_WORKSPACE
          export NDK_HOME_BIN=$GITHUB_WORKSPACE/android-ndk-r21b/toolchains/llvm/prebuilt/linux-x86_64/bin
          ln -s $NDK_HOME_BIN/aarch64-linux-android21-clang $NDK_HOME_BIN/aarch64-linux-android-clang
          echo "::add-path::$NDK_HOME_BIN"
      - run: rustup target add aarch64-linux-android
      - run: cargo clippy --target aarch64-linux-android

  macos-vulkan-portability:
    name: MacOS Stable (Vulkan)
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
      - run: rustup component add clippy
      - run: cargo clippy --features vulkan-portability

  # Create a Github release and upload the binary libs that we just built.
  # There should be a release and debug build for each os (win32, win64, MacOS64, Linux32, Linux64),
  # plus a file containing the commit sha.
  publish:
    name: Publish Github release
    needs: [release-build]
    runs-on: ubuntu-18.04
    if: success() && contains(github.ref, 'tags/v')
    steps:
    - uses: actions/checkout@v2
    - name: Download assets
      uses: actions/download-artifact@v1.0.0
      with:
        name: dist
    - name: Create commit-sha file
      env:
        GITHUB_SHA: ${{ github.sha }}
      run: |
        echo $GITHUB_SHA > dist/commit-sha
    - name: Get version from git ref
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        body: |
            Autogenerated binary modules.
            The Linux builds are build on CentOS 6 (glibc 2.12, see [Manylinux2010](https://www.python.org/dev/peps/pep-0571/)).
            The MacOS builds target MacOS 10.13 High Sierra and up.
        draft: false
        prerelease: false
    - name: Upload Release Assets
      # Move back to official action after fix https://github.com/actions/upload-release-asset/issues/4
      uses: AButler/upload-release-assets@v2.0
      with:
        release-tag: ${{ steps.get_version.outputs.VERSION }}
        files: 'dist/*.zip;dist/commit-sha'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
